diff --git a/node_modules/internetarchive-sdk-js/dist/HttpClient.js b/node_modules/internetarchive-sdk-js/dist/HttpClient.js
index d9f9575..fd473b5 100644
--- a/node_modules/internetarchive-sdk-js/dist/HttpClient.js
+++ b/node_modules/internetarchive-sdk-js/dist/HttpClient.js
@@ -53,6 +53,7 @@ class HttpClient {
                         }
                     }
                 }
+             
                 const response = await fetch(apiUrl, {
                     headers,
                     method: endpoint.method,
diff --git a/node_modules/internetarchive-sdk-js/dist/index.cjs b/node_modules/internetarchive-sdk-js/dist/index.cjs
index ed62429..150de00 100644
--- a/node_modules/internetarchive-sdk-js/dist/index.cjs
+++ b/node_modules/internetarchive-sdk-js/dist/index.cjs
@@ -330,33 +330,42 @@ class InternetArchive {
      */
     async getItems(items) {
         const { filters, options } = items;
-        const { fields, rows } = options || {};
+        const { fields, rows, page } = options || {};
+        const limit = Number(rows) || 50;
+        const currentPage = Number(page) || 1;
+     
+    
         const params = {
             'q': filters?.collection && filters?.subject && filters?.creator
-                ? `collection:(${filters?.collection})&subject:("${filters?.subject}")&creator:("${filters?.creator}")`
+                ? `collection:(${filters.collection}) AND subject:("${filters.subject}") AND creator:("${filters.creator}")`
                 : filters?.collection && filters?.subject
-                    ? `collection:(${filters.collection})&subject:("${filters.subject}")`
+                    ? `collection:(${filters.collection}) AND subject:("${filters.subject}")`
                     : filters?.collection && filters?.creator
-                        ? `collection:(${filters.collection})&creator:("${filters.creator}")`
+                        ? `collection:(${filters.collection}) AND creator:("${filters.creator}")`
                         : filters?.subject && filters?.creator
-                            ? `subject:(${filters.subject})&creator:("${filters.creator}")`
+                            ? `subject:("${filters.subject}") AND creator:("${filters.creator}")`
                             : filters?.collection
                                 ? `collection:(${filters.collection})`
                                 : filters?.subject
-                                    ? `subject:(${filters.subject})`
+                                    ? `subject:("${filters.subject}")`
                                     : filters?.creator
-                                        ? `creator:(${filters.creator})`
+                                        ? `creator:("${filters.creator}")`
                                         : null,
             ...(fields && { 'fl[]': fields.replace(/ /g, '') }),
-            'rows': Number(rows) || 50,
+            'rows': limit,
+            'page': currentPage,
             'output': 'json',
             'sort[]': 'date desc',
         };
+    
         if (!params.q) {
-            throw new Error('collection, subject, or creator required');
+            throw new Error('At least one of collection, subject, or creator is required');
         }
+    
         return await this.httpClient.makeRequest(endpoints.getItems, { params });
     }
+    
+     
     /**
      * Returns an Item by identifier.
      *
diff --git a/node_modules/internetarchive-sdk-js/dist/index.js b/node_modules/internetarchive-sdk-js/dist/index.js
index 17db2df..edc5339 100644
--- a/node_modules/internetarchive-sdk-js/dist/index.js
+++ b/node_modules/internetarchive-sdk-js/dist/index.js
@@ -88,31 +88,38 @@ class InternetArchive {
      */
     async getItems(items) {
         const { filters, options } = items;
-        const { fields, rows } = options || {};
+        const { fields, rows, page } = options || {};
+        const limit = Number(rows) || 50;
+        const currentPage = Number(page) || 1;
+     
+    
         const params = {
             'q': filters?.collection && filters?.subject && filters?.creator
-                ? `collection:(${filters?.collection})&subject:("${filters?.subject}")&creator:("${filters?.creator}")`
+                ? `collection:(${filters.collection}) AND subject:("${filters.subject}") AND creator:("${filters.creator}")`
                 : filters?.collection && filters?.subject
-                    ? `collection:(${filters.collection})&subject:("${filters.subject}")`
+                    ? `collection:(${filters.collection}) AND subject:("${filters.subject}")`
                     : filters?.collection && filters?.creator
-                        ? `collection:(${filters.collection})&creator:("${filters.creator}")`
+                        ? `collection:(${filters.collection}) AND creator:("${filters.creator}")`
                         : filters?.subject && filters?.creator
-                            ? `subject:(${filters.subject})&creator:("${filters.creator}")`
+                            ? `subject:("${filters.subject}") AND creator:("${filters.creator}")`
                             : filters?.collection
                                 ? `collection:(${filters.collection})`
                                 : filters?.subject
-                                    ? `subject:(${filters.subject})`
+                                    ? `subject:("${filters.subject}")`
                                     : filters?.creator
-                                        ? `creator:(${filters.creator})`
+                                        ? `creator:("${filters.creator}")`
                                         : null,
             ...(fields && { 'fl[]': fields.replace(/ /g, '') }),
-            'rows': Number(rows) || 50,
+            'rows': limit,
+            'page': currentPage,
             'output': 'json',
             'sort[]': 'date desc',
         };
+    
         if (!params.q) {
-            throw new Error('collection, subject, or creator required');
+            throw new Error('At least one of collection, subject, or creator is required');
         }
+     
         return await this.httpClient.makeRequest(endpoints.getItems, { params });
     }
     /**
